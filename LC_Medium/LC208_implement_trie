public class Trie {

    TrieNode root;
    char endOfWordChar = '*';

    public Trie() {
        root = new TrieNode();
    }
    
    public void Insert(string word) {
        TrieNode cur = root;    
        for (int i = 0; i < word.Length; i++)
        {
            if (!cur.children.ContainsKey(word[i]))
            {
                cur.children[word[i]] = new TrieNode();
            }
            cur = cur.children[word[i]];
        }
        cur.children[endOfWordChar] = new TrieNode();
    }
    
    public bool Search(string word) {
        TrieNode cur = root;
        for (int i = 0; i < word.Length; i++)
        {
            if (!cur.children.ContainsKey(word[i]))
            {
                return false;
            }
            else
            {
                cur = cur.children[word[i]];
            }
        }
        if (cur.children.ContainsKey(endOfWordChar))
        {
            return true;
        }
        return false;
    }
    
    public bool StartsWith(string prefix) {
        TrieNode cur = root;
        for (int i = 0; i < prefix.Length; i++)
        {
            if (!cur.children.ContainsKey(prefix[i]))
            {
                return false;
            }
            else
            {
                cur = cur.children[prefix[i]];
            }
        }
        return true;
    }

    public class TrieNode {
        public Dictionary<char, TrieNode> children = new Dictionary<char, TrieNode>();
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.Insert(word);
 * bool param_2 = obj.Search(word);
 * bool param_3 = obj.StartsWith(prefix);
 */